---
layout: post
title: "Basic Cryptography For Developers"
date: 2012-10-16 14:48
comments: true
published: true
categories:
---

##There are three major components to modern cryptography
	1.Encryption - Keeping something secret even if it's "seen" by a third party
	2.Authentication - Preserving the integrity of the message
	3.Identification - Finding out who sent the message

{% img [class]  /images/vault.png 400 [title text [alt text]] %}


	Encryption should allow a user to submit information across a network without risking message being read by a third party. Even if someone views thee message, they shouldn't be able to decode it. Keys are the only part of the encryption that needs to be kept secret. If an attacker knows the algorithms used to generate the encryption, they still won't be able to view the message without the key.  		

	Building your own cryptographic scripts is a bad idea. As a general guideline, it's best to use government standards when trying to protect information. Edgecases are incredibly easy to overlook and testing for them is difficult. Experts frequently make mistakes and overlook these details. One common problem with encryption security arise from the lack of randomness of the encryption functions. Some random number generators aren't suited for cyptography because the [numbers they return aren't random](http://www.random.org/randomness/). As a result, the keys produced can be predicted. In Ruby, OpenSSL::Random is a reliable random number generator.  		

	Hashes are commonly used to store sensitive information. This can be an issue if the hash function that generates the key doesn't prevent against a [length extension attack](http://en.wikipedia.org/wiki/Length_extension_attack). Hash functions such as MD5 and SHA1 are no longer recommended, due partially to their succeptability to this type of attack. This type of attack appends a string to the end of the key. Any addition to the end of the key overrides the data next to it. Attackers can add on to the hash key(and change the message) without actually decrypting it. Using a newer generation hash function such as a [SHA 2](http://en.wikipedia.org/wiki/SHA-2) prevents against this type of attack. 

	Storing passwords in for your website can either be done using an existing framework or deligated to third party. Websites like facebook and google are two third parties that can be used to verify a user account. If you intend on building the storage yourself, ruby on rails includes frameworks such as devise to accomplish this. Depending on the level of privacy needed for your application, a third party host is a convenient and reliable option to store passwords.


	Cryptography is hard to do well. Professionals spend enormous amounts of time and effor attemping to perfect these techniques and even they make mistakes. Depending on the service you're running, external services are going to be a safe bet. Financial or other services whose information is not trusted outside the organization are more likely to need their own methods. 